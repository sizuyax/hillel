basePath: /
definitions:
  apperrors.Error:
    properties:
      message:
        type: string
      type:
        $ref: '#/definitions/apperrors.ErrorType'
    type: object
  apperrors.ErrorType:
    enum:
    - AUTHORIZATION
    - BAD_REQUEST
    - CONFLICT
    - INTERNAL
    - NO_ROWS
    - UNPROCESSABLE
    type: string
    x-enum-comments:
      Authorization: 401 UnAuthorize
      BadRequest: BadInput - 400
      Conflict: Already exists (eg, create account with existent email) - 409
      Internal: Server (500) and fallback apperrors - 500
      NoRows: 404 Not Found
      Unprocessable: 422 Unprocessable Entity
    x-enum-varnames:
    - Authorization
    - BadRequest
    - Conflict
    - Internal
    - NoRows
    - Unprocessable
  dto.CreateBidRequest:
    properties:
      points:
        type: number
    type: object
  dto.CreateCommentRequest:
    properties:
      body:
        type: string
    type: object
  dto.CreateItemRequest:
    properties:
      name:
        type: string
      price:
        type: number
    type: object
  dto.CreateSellerRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.RefreshTokensRequest:
    properties:
      refreshToken:
        type: string
    type: object
  dto.UpdateItemRequest:
    properties:
      id:
        type: integer
      name:
        type: string
      price:
        type: number
    type: object
  entity.Bid:
    properties:
      id:
        type: integer
      item_id:
        type: integer
      owner_id:
        type: integer
      points:
        type: number
    type: object
  entity.Comment:
    properties:
      body:
        type: string
      id:
        type: integer
      item_id:
        type: integer
      owner_id:
        type: integer
    type: object
  entity.Item:
    properties:
      id:
        type: integer
      name:
        type: string
      owner_id:
        type: integer
      price:
        type: number
    type: object
  entity.PairJWTClaims:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
host: http://swagger.io/terms/
info:
  contact: {}
  description: Hillel Project
  title: Project-Auction API
  version: "1.0"
paths:
  /auth/tokens:
    post:
      consumes:
      - application/json
      description: Refresh access token
      parameters:
      - description: model for refresh access token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokensRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.PairJWTClaims'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.Error'
      summary: Refresh access token
      tags:
      - Tokens
  /items:
    get:
      consumes:
      - application/json
      description: Get all items
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Item'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperrors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.Error'
      summary: Get items
      tags:
      - Items
    post:
      consumes:
      - application/json
      description: Create item
      parameters:
      - description: model for create item
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateItemRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Item'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/apperrors.Error'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/apperrors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.Error'
      security:
      - ApiKeyAuth: []
      summary: Create item
      tags:
      - Items
  /items/{id}:
    delete:
      consumes:
      - application/json
      description: Delete item
      parameters:
      - description: delete item by id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete item
      tags:
      - Items
    get:
      consumes:
      - application/json
      description: Get item by id
      parameters:
      - description: get item by id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Item'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.Error'
      summary: Get item
      tags:
      - Items
    put:
      consumes:
      - application/json
      description: Update item
      parameters:
      - description: model for update item
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Item'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.Error'
      security:
      - ApiKeyAuth: []
      summary: Update item
      tags:
      - Items
  /items/{id}/bids:
    post:
      consumes:
      - application/json
      description: Create bid for item
      parameters:
      - description: item id for bid
        in: path
        name: id
        required: true
        type: string
      - description: model for create bid
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateBidRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Bid'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.Error'
      security:
      - ApiKeyAuth: []
      summary: Create bid for item
      tags:
      - Bids
  /items/{id}/comments:
    post:
      consumes:
      - application/json
      description: Comment item
      parameters:
      - description: comment item with id
        in: path
        name: id
        required: true
        type: string
      - description: model for create comment
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Comment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.Error'
      security:
      - ApiKeyAuth: []
      summary: Comment item
      tags:
      - Comments
  /sellers:
    post:
      consumes:
      - application/json
      description: Create seller
      parameters:
      - description: model for create seller
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateSellerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.Error'
      summary: User can become a seller
      tags:
      - Sellers
  /users:
    post:
      consumes:
      - application/json
      description: Register user
      parameters:
      - description: model for create user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.Error'
      summary: Register user
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
