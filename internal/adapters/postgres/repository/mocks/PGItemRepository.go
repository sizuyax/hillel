// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "project-auction/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// PGItemRepository is an autogenerated mock type for the PGItemRepository type
type PGItemRepository struct {
	mock.Mock
}

// DeleteItemByID provides a mock function with given fields: _a0, _a1
func (_m *PGItemRepository) DeleteItemByID(_a0 context.Context, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteItemByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertItem provides a mock function with given fields: _a0, _a1
func (_m *PGItemRepository) InsertItem(_a0 context.Context, _a1 entity.Item) (entity.Item, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InsertItem")
	}

	var r0 entity.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Item) (entity.Item, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Item) entity.Item); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entity.Item)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Item) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectItemByID provides a mock function with given fields: _a0, _a1
func (_m *PGItemRepository) SelectItemByID(_a0 context.Context, _a1 int) (entity.Item, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SelectItemByID")
	}

	var r0 entity.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (entity.Item, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) entity.Item); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entity.Item)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectItems provides a mock function with given fields: _a0
func (_m *PGItemRepository) SelectItems(_a0 context.Context) ([]entity.Item, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SelectItems")
	}

	var r0 []entity.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.Item, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Item); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateItem provides a mock function with given fields: _a0, _a1
func (_m *PGItemRepository) UpdateItem(_a0 context.Context, _a1 entity.Item) (entity.Item, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateItem")
	}

	var r0 entity.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Item) (entity.Item, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Item) entity.Item); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entity.Item)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Item) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPGItemRepository creates a new instance of PGItemRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPGItemRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PGItemRepository {
	mock := &PGItemRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
