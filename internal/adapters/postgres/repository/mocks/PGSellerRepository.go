// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	entity "project-auction/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// PGSellerRepository is an autogenerated mock type for the PGSellerRepository type
type PGSellerRepository struct {
	mock.Mock
}

// InsertSeller provides a mock function with given fields: _a0
func (_m *PGSellerRepository) InsertSeller(_a0 entity.Seller) (entity.Seller, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InsertSeller")
	}

	var r0 entity.Seller
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Seller) (entity.Seller, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(entity.Seller) entity.Seller); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entity.Seller)
	}

	if rf, ok := ret.Get(1).(func(entity.Seller) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPGSellerRepository creates a new instance of PGSellerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPGSellerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PGSellerRepository {
	mock := &PGSellerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
